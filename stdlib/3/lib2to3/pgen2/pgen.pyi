# Stubs for lib2to3.pgen2.pgen (Python 3.6)

from typing import Any, Dict, IO, Iterator, List, Optional, Tuple
from lib2to3.pgen2 import grammar
from lib2to3.pgen2.tokenize import _TokenInfo

class PgenGrammar(grammar.Grammar): ...

class ParserGenerator:
    filename: str
    stream: IO[str]
    generator: Iterator[_TokenInfo]
    first: Dict[str, Dict[str, int]]
    def __init__(self, filename: str, stream: Optional[IO[str]] = ...) -> None: ...
    def make_grammar(self) -> PgenGrammar: ...
    def make_first(self, c: PgenGrammar, name: str): ...
    def make_label(self, c: PgenGrammar, label: str) -> int: ...
    def addfirstsets(self) -> None: ...
    def calcfirst(self, name: str) -> None: ...
    def parse(self) -> Tuple[Dict[str, Any], str]: ...
    def make_dfa(self, start, finish): ...
    def dump_nfa(self, name: str, start, finish): ...
    def dump_dfa(self, name: str, dfa): ...
    def simplify_dfa(self, dfa): ...
    def parse_rhs(self): ...
    def parse_alt(self): ...
    def parse_item(self): ...
    def parse_atom(self): ...
    def expect(self, type, value: Optional[Any] = ...): ...
    def gettoken(self): ...
    def raise_error(self, msg, *args): ...

class NFAState:
    arcs: List[Tuple[Optional[str], NFAState]]
    def __init__(self) -> None: ...
    def addarc(self, next: NFAState, label: Optional[str] = ...) -> None: ...

class DFAState:
    nfaset: Dict[NFAState, Any]
    isfinal: bool
    arcs: Dict[str, DFAState]
    def __init__(self, nfaset: Dict[NFAState, Any], final: NFAState) -> None: ...
    def addarc(self, next: DFAState, label: str) -> None: ...
    def unifystate(self, old: DFAState, new: DFAState) -> None: ...
    def __eq__(self, other: Any) -> bool: ...
    __hash__: None  # type: ignore

def generate_grammar(filename: str = ...) -> PgenGrammar: ...
